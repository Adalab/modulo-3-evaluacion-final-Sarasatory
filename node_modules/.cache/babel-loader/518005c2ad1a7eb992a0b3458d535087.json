{"ast":null,"code":"import _slicedToArray from\"/Users/satory/Adalab/Evaluaciones/Mo\\u0301dulo 3 - Evaluacio\\u0301n final/modulo-3-evaluacion-final-Sarasatory/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState,useEffect}from'react';import{Routes,Route}from'react-router-dom';import{matchPath,useLocation}from'react-router';import Filters from'./Filters';import MovieSceneList from'./MovieSceneList';import MovieSceneDetail from'./MovieSceneDetail';import MovieScene404 from'./MovieScene404';import Order from'./Order';import getApiData from'../services/getApiData';import localStorage from'../services/localStorage';import deleteDuplicates from'../services/deleteDuplicates';import orderBy from'../services/orderBy';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";function App(){//\n//\n// CONSTANTES DE ESTADO:\nvar _useState=useState(localStorage.get('dataScenesLS',[])),_useState2=_slicedToArray(_useState,2),dataScenes=_useState2[0],setDataScenes=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),dataScenesOrdered=_useState4[0],setDataScenesOrdered=_useState4[1];// const [dataScenesOrdered, setDataScenesOrdered] = useState(\n//   localStorage.get('dataScenesLS', [])\n// );\nvar _useState5=useState(''),_useState6=_slicedToArray(_useState5,2),filterYear=_useState6[0],setFilterYear=_useState6[1];var _useState7=useState(''),_useState8=_slicedToArray(_useState7,2),filterMovie=_useState8[0],setFilterMovie=_useState8[1];var _useState9=useState('movie'),_useState10=_slicedToArray(_useState9,2),orderProperty=_useState10[0],setOrderProperty=_useState10[1];//\n//\n// HOOKS:\n// Se llama al servicio \"getApiData\", que recoge los datos de la Api la primera vez que cargamos la página.\n// Allí mismo limpiamos estos datos, cogiendo solo la información que necesitamos.\n// Después guardamos esta información en la constante de estado \"dataScenes\"\nuseEffect(function(){if(dataScenes.length===0){getApiData().then(function(dataFromApi){setDataScenes(dataFromApi);});}},[]);// Se llama al servicio \"localStorage\", y mediante su función \"set\", guardamos los datos en localStorage.\n// Se hace uso de \"useEffect\" para que esta información guardada en localStorage se actualice cada vez que lo haga la variable de estado \"dataScenes\".\nuseEffect(function(){localStorage.set('dataScenesLS',dataScenes);},[dataScenes]);useEffect(function(){handleOrderProperty();console.log('PINTA ESTO',orderProperty);},[orderProperty]);//\n//\n// FUNCIONES MANEJADORAS:\n// Filtros:\nvar handleFilterMovie=function handleFilterMovie(value){setFilterMovie(value);};var handleFilterYear=function handleFilterYear(value){setFilterYear(value);};var actualiceOrderProperty=function actualiceOrderProperty(value){setOrderProperty(value);};// Orden:\nvar handleOrderProperty=function handleOrderProperty(){setDataScenesOrdered(orderBy(dataScenes,orderProperty));};//\n//\n// FUNCIONES GENERALES:\n// Obtener un array con los años de las escenas devueltas.\nvar yearsList=dataScenes.map(function(item){return item.year;});// Llamo al servicio \"deleteDuplicates\" para que me devuelva un array con los datos sin repetir.\nvar uniqueYear=deleteDuplicates(yearsList);// Ordeno el array \"uniqueYear\" por orden ascendente.\nuniqueYear.sort(function(a,b){return a-b;});//\n//\n// FILTRADO:\n// Filtro por título.\nvar sceneFilters=(dataScenesOrdered.length===0?dataScenes:dataScenesOrdered).filter(function(item){return item.movie.toLowerCase().includes(filterMovie.toLocaleLowerCase());})// Filtro por año.\n.filter(function(item){if(filterYear===''||filterYear==='0'){return true;}else{return item.year.toString()===filterYear;}});// Rutas dinámicas.\n// En \"pathname\" metemos la información de la url.\nvar _useLocation=useLocation(),pathname=_useLocation.pathname;console.log('pathname',pathname);// Con \"matchPath\" obtenemos o un \"null\" o un objeto con bastante información, dependiendo de si la ruta actual coincide o no con la ruta dinámica.\nvar dataPath=matchPath('/scene/:sceneId',pathname);console.log('dataPath',dataPath);// Metemos en \"sceneId\" o el \"id\" sacado de la ruta actual, o un \"null\".\nvar sceneId=dataPath!==null?dataPath.params.sceneId:null;console.log('sceneId',sceneId);// Buscamos la escena \"item\" cuyo id \"item.id\" coincida con el id de la url \"sceneId\", para recoger esa escena solamente y pasarla por props a la vista de detalle.\nvar sceneFound=dataScenes.find(function(item){return item.id.toString()===sceneId;});console.log('ESCENE FOUND: ',sceneFound);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"title--big\",children:\"Directorio de scenas Wow\"}),/*#__PURE__*/_jsx(Filters,{filterMovie:filterMovie,handleFilterMovie:handleFilterMovie,handleFilterYear:handleFilterYear,uniqueYear:uniqueYear}),/*#__PURE__*/_jsx(Order,{actualiceOrderProperty:actualiceOrderProperty}),/*#__PURE__*/_jsxs(\"h2\",{children:[\"Resultados: \",sceneFilters.length]}),/*#__PURE__*/_jsx(MovieSceneList,{sceneFilters:sceneFilters})]})}),/*#__PURE__*/_jsx(Route,{path:\"/scene/:sceneId\",element:/*#__PURE__*/_jsx(MovieSceneDetail,{sceneFound:sceneFound})}),/*#__PURE__*/_jsx(Route,{path:\"*\",element:/*#__PURE__*/_jsx(MovieScene404,{sceneFound:sceneFound})})]})})});}export default App;","map":{"version":3,"names":["useState","useEffect","Routes","Route","matchPath","useLocation","Filters","MovieSceneList","MovieSceneDetail","MovieScene404","Order","getApiData","localStorage","deleteDuplicates","orderBy","App","get","dataScenes","setDataScenes","dataScenesOrdered","setDataScenesOrdered","filterYear","setFilterYear","filterMovie","setFilterMovie","orderProperty","setOrderProperty","length","then","dataFromApi","set","handleOrderProperty","console","log","handleFilterMovie","value","handleFilterYear","actualiceOrderProperty","yearsList","map","item","year","uniqueYear","sort","a","b","sceneFilters","filter","movie","toLowerCase","includes","toLocaleLowerCase","toString","pathname","dataPath","sceneId","params","sceneFound","find","id"],"sources":["/Users/satory/Adalab/Evaluaciones/Módulo 3 - Evaluación final/modulo-3-evaluacion-final-Sarasatory/src/components/App.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { matchPath, useLocation } from 'react-router';\nimport Filters from './Filters';\nimport MovieSceneList from './MovieSceneList';\nimport MovieSceneDetail from './MovieSceneDetail';\nimport MovieScene404 from './MovieScene404';\nimport Order from './Order';\nimport getApiData from '../services/getApiData';\nimport localStorage from '../services/localStorage';\nimport deleteDuplicates from '../services/deleteDuplicates';\nimport orderBy from '../services/orderBy';\n\nfunction App() {\n  //\n  //\n  // CONSTANTES DE ESTADO:\n  const [dataScenes, setDataScenes] = useState(\n    localStorage.get('dataScenesLS', [])\n  );\n  const [dataScenesOrdered, setDataScenesOrdered] = useState([]);\n  // const [dataScenesOrdered, setDataScenesOrdered] = useState(\n  //   localStorage.get('dataScenesLS', [])\n  // );\n\n  const [filterYear, setFilterYear] = useState('');\n  const [filterMovie, setFilterMovie] = useState('');\n  const [orderProperty, setOrderProperty] = useState('movie');\n\n  //\n  //\n  // HOOKS:\n\n  // Se llama al servicio \"getApiData\", que recoge los datos de la Api la primera vez que cargamos la página.\n  // Allí mismo limpiamos estos datos, cogiendo solo la información que necesitamos.\n  // Después guardamos esta información en la constante de estado \"dataScenes\"\n  useEffect(() => {\n    if (dataScenes.length === 0) {\n      getApiData().then((dataFromApi) => {\n        setDataScenes(dataFromApi);\n      });\n    }\n  }, []);\n\n  // Se llama al servicio \"localStorage\", y mediante su función \"set\", guardamos los datos en localStorage.\n  // Se hace uso de \"useEffect\" para que esta información guardada en localStorage se actualice cada vez que lo haga la variable de estado \"dataScenes\".\n  useEffect(() => {\n    localStorage.set('dataScenesLS', dataScenes);\n  }, [dataScenes]);\n\n  useEffect(() => {\n    handleOrderProperty();\n    console.log('PINTA ESTO', orderProperty);\n  }, [orderProperty]);\n\n  //\n  //\n  // FUNCIONES MANEJADORAS:\n\n  // Filtros:\n  const handleFilterMovie = (value) => {\n    setFilterMovie(value);\n  };\n\n  const handleFilterYear = (value) => {\n    setFilterYear(value);\n  };\n\n  const actualiceOrderProperty = (value) => {\n    setOrderProperty(value);\n  };\n\n  // Orden:\n  const handleOrderProperty = () => {\n    setDataScenesOrdered(orderBy(dataScenes, orderProperty));\n  };\n\n  //\n  //\n  // FUNCIONES GENERALES:\n\n  // Obtener un array con los años de las escenas devueltas.\n  const yearsList = dataScenes.map((item) => item.year);\n\n  // Llamo al servicio \"deleteDuplicates\" para que me devuelva un array con los datos sin repetir.\n  const uniqueYear = deleteDuplicates(yearsList);\n\n  // Ordeno el array \"uniqueYear\" por orden ascendente.\n  uniqueYear.sort((a, b) => a - b);\n\n  //\n  //\n  // FILTRADO:\n\n  // Filtro por título.\n  const sceneFilters = (\n    dataScenesOrdered.length === 0 ? dataScenes : dataScenesOrdered\n  )\n    .filter((item) => {\n      return item.movie.toLowerCase().includes(filterMovie.toLocaleLowerCase());\n    })\n    // Filtro por año.\n    .filter((item) => {\n      if (filterYear === '' || filterYear === '0') {\n        return true;\n      } else {\n        return item.year.toString() === filterYear;\n      }\n    });\n\n  // Rutas dinámicas.\n  // En \"pathname\" metemos la información de la url.\n  const { pathname } = useLocation();\n  console.log('pathname', pathname);\n\n  // Con \"matchPath\" obtenemos o un \"null\" o un objeto con bastante información, dependiendo de si la ruta actual coincide o no con la ruta dinámica.\n  const dataPath = matchPath('/scene/:sceneId', pathname);\n  console.log('dataPath', dataPath);\n\n  // Metemos en \"sceneId\" o el \"id\" sacado de la ruta actual, o un \"null\".\n  const sceneId = dataPath !== null ? dataPath.params.sceneId : null;\n  console.log('sceneId', sceneId);\n\n  // Buscamos la escena \"item\" cuyo id \"item.id\" coincida con el id de la url \"sceneId\", para recoger esa escena solamente y pasarla por props a la vista de detalle.\n  const sceneFound = dataScenes.find((item) => item.id.toString() === sceneId);\n  console.log('ESCENE FOUND: ', sceneFound);\n\n  return (\n    <>\n      <div>\n        <Routes>\n          <Route\n            path='/'\n            element={\n              <>\n                <h1 className='title--big'>Directorio de scenas Wow</h1>\n                <Filters\n                  filterMovie={filterMovie}\n                  handleFilterMovie={handleFilterMovie}\n                  handleFilterYear={handleFilterYear}\n                  uniqueYear={uniqueYear}\n                />\n                <Order actualiceOrderProperty={actualiceOrderProperty} />\n                <h2>Resultados: {sceneFilters.length}</h2>\n                <MovieSceneList sceneFilters={sceneFilters} />\n              </>\n            }\n          />\n          <Route\n            path='/scene/:sceneId'\n            element={<MovieSceneDetail sceneFound={sceneFound} />}\n          />\n          <Route path='*' element={<MovieScene404 sceneFound={sceneFound} />} />\n        </Routes>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}